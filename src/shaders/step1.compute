#include "bgfx_compute.sh"

BUFFER_RW(u_particle, vec2, 0);
BUFFER_RW(u_densities, vec4, 2);
BUFFER_RW(u_velocities, vec2, 3);

uniform vec4 u_numParticles;
uniform vec4 u_radius;
uniform vec4 u_resolution;

float SmoothingKernel(float radius, float dst) {
    float volume = 3.14159265359 * pow(radius, 8.0) / 4.0;
    float squared = radius * radius - dst * dst;
    float value = (squared > 0.0) ? squared : 0.0;
    
    return (value * value * value) / volume;
}

float Distance2Vectors(vec2 A, vec2 B) {
    return length(A - B);
}

float CalculateDensity(vec2 samplePoint) {
    float density = 0.0;
    const float mass = 1.0;

    for (int i = 0; i < u_numParticles.x; i++) {
        vec2 normalizedSample = (samplePoint + 1) / 2;
        vec2 normalizedPoint = (u_particle[i] + 1) / 2;
        float normalizedRadius = u_radius.x / u_resolution.x;

        float dst = Distance2Vectors(normalizedSample, normalizedPoint);
        float influence = SmoothingKernel(normalizedRadius, dst);
        density += mass * influence;
    }
    return density;
}

NUM_THREADS(256, 1, 1)
void main() {
  uint idx = gl_GlobalInvocationID.x;

  u_densities[idx].x = CalculateDensity(u_particle[idx]);
}
